{"version":3,"sources":["components/Header.js","components/Footer.js","cardsData.js","App.jsx","serviceWorker.js","index.js"],"names":["Header","props","score","highScore","Footer","cardsData","id","img","count","App","state","clickedArray","handleClick","target","console","log","includes","alert","setState","shuffle","array","i","length","j","Math","floor","random","arrayOfJsx","this","map","item","onClick","className","key","src","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8PAYeA,MAVf,SAAgBC,GACZ,OACI,gCACI,2CACA,8CAAoBA,EAAMC,OAC1B,2CAAiBD,EAAME,aCGpBC,MARf,WACI,OACI,gCACI,uFC0DGC,EA/DG,CAAC,CACXC,GAAI,EACJC,IAAK,kCACLC,MAAO,GAEX,CACIF,GAAI,EACJC,IAAK,+BACLC,MAAO,GAEX,CACIF,GAAI,EACJC,IAAK,+BACLC,MAAO,GAEX,CACIF,GAAI,EACJC,IAAK,+BACLC,MAAO,GAEX,CACIF,GAAI,EACJC,IAAK,sCACLC,MAAO,GAEX,CACIF,GAAI,EACJC,IAAK,8BACLC,MAAO,GAEX,CACIF,GAAI,EACJC,IAAK,8BACLC,MAAO,GAEX,CACIF,GAAI,EACJC,IAAK,8BACLC,MAAO,GAEX,CACIF,GAAI,EACJC,IAAK,8BACLC,MAAO,GAEX,CACIF,GAAI,GACJC,IAAK,+BACLC,MAAO,GAEX,CACIF,GAAI,GACJC,IAAK,+BACLC,MAAO,GAEX,CACIF,GAAI,GACJC,IAAK,wCACLC,MAAO,ICaAC,E,2MA/DbC,MAAQ,CACNL,UAAWA,EACXH,MAAO,EACPC,UAAW,EACXQ,aAAc,I,EAGhBC,YAAc,YAAiB,IAAdC,EAAa,EAAbA,OACfC,QAAQC,IAAIF,EAAOP,IACnB,IAAIJ,EAAQ,EAAKQ,MAAMR,MACnBC,EAAY,EAAKO,MAAMP,UAE3B,GAAI,EAAKO,MAAMC,aAAaK,SAASH,EAAOP,IAC1CW,MAAM,aACFf,EAAQC,IACV,EAAKe,SAAS,CAAEf,UAAW,EAAKO,MAAMR,QACtCY,QAAQC,IAAI,EAAKL,MAAMP,YAEzB,EAAKe,SAAS,CAAEhB,MAAO,EAAGS,aAAc,SACnC,CAEL,IAAIN,EAAY,EAAKK,MAAML,UAC3BA,EAAY,EAAKc,QAAQd,GAEzB,EAAKa,SAAS,CACZb,UAAWA,EACXH,MAAO,EAAKQ,MAAMR,MAAQ,EAC1BS,aAAa,GAAD,mBAAM,EAAKD,MAAMC,cAAjB,CAA+BE,EAAOP,OAEpDQ,QAAQC,IAAI,EAAKL,MAAMC,gB,uEAInBS,GACN,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADC,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,KAI3C,OAAOH,I,+BAGC,IAAD,OACHO,EAAaC,KAAKlB,MAAML,UAAUwB,KAAI,SAAAC,GAAI,OAC5C,yBACEC,QAAS,EAAKnB,YACdoB,UAAU,OACVC,IAAKH,EAAKxB,GACVA,GAAIwB,EAAKxB,GACT4B,IAAKJ,EAAKvB,IACV4B,IAAKL,EAAKxB,QAId,OACE,6BACE,kBAAC,EAAD,CAAQJ,MAAO0B,KAAKlB,MAAMR,MAAOC,UAAWyB,KAAKlB,MAAMP,YACvD,yBAAK6B,UAAU,YAAYL,GAC3B,kBAAC,EAAD,W,GA1DUS,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.48533d8a.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header(props) {\n    return (\n        <header>\n            <h1>Clicky Game</h1>\n            <h3>Current Score: {props.score}</h3>\n            <h3>High Score: {props.highScore}</h3>\n        </header>\n    )\n}\n\nexport default Header;","import React from \"react\";\n\nfunction Footer() {\n    return (\n        <footer>\n            <h3>How to Play: Click on each image once, but only once!</h3>\n        </footer>\n    )\n}\n\nexport default Footer;","const cardsData = [{\n        id: 1,\n        img: \"./images/animal-2184791_640.jpg\",\n        count: 0\n    },\n    {\n        id: 2,\n        img: \"./images/dog-1801419_640.jpg\",\n        count: 0\n    },\n    {\n        id: 3,\n        img: \"./images/dog-2440586_640.jpg\",\n        count: 0\n    },\n    {\n        id: 4,\n        img: \"./images/dog-2556796_640.jpg\",\n        count: 0\n    },\n    {\n        id: 5,\n        img: \"./images/weimaraner-2670948_640.jpg\",\n        count: 0\n    },\n    {\n        id: 6,\n        img: \"/images/dog-2969033_640.jpg\",\n        count: 0\n    },\n    {\n        id: 7,\n        img: \"/images/dog-3188544_640.jpg\",\n        count: 0\n    },\n    {\n        id: 8,\n        img: \"/images/dog-3701377_640.jpg\",\n        count: 0\n    },\n    {\n        id: 9,\n        img: \"/images/dog-4059309_640.jpg\",\n        count: 0\n    },\n    {\n        id: 10,\n        img: \"/images/dogs-2556820_640.jpg\",\n        count: 0\n    },\n    {\n        id: 11,\n        img: \"/images/dogs-3178739_640.jpg\",\n        count: 0\n    },\n    {\n        id: 12,\n        img: \"/images/rauhaardackel-2179470_640.jpg\",\n        count: 0\n    }\n\n]\n\nexport default cardsData;","import React from \"react\";\nimport \"./App.css\";\n// import Card from \"./components/Card\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport cardsData from \"./cardsData\";\n\nclass App extends React.Component {\n  state = {\n    cardsData: cardsData,\n    score: 0,\n    highScore: 0,\n    clickedArray: []\n  };\n\n  handleClick = ({ target }) => {\n    console.log(target.id);\n    var score = this.state.score;\n    var highScore = this.state.highScore;\n\n    if (this.state.clickedArray.includes(target.id)) {\n      alert(\"You Lose!\");\n      if (score > highScore) {\n        this.setState({ highScore: this.state.score });\n        console.log(this.state.highScore);\n      }\n      this.setState({ score: 0, clickedArray: [] });\n    } else {\n      // console.log(this);\n      var cardsData = this.state.cardsData;\n      cardsData = this.shuffle(cardsData);\n\n      this.setState({\n        cardsData: cardsData,\n        score: this.state.score + 1,\n        clickedArray: [...this.state.clickedArray, target.id]\n      });\n      console.log(this.state.clickedArray);\n    }\n  };\n\n  shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n      [array[i], array[j]] = [array[j], array[i]]; // swap elements\n    }\n    return array;\n  }\n\n  render() {\n    let arrayOfJsx = this.state.cardsData.map(item => (\n      <img\n        onClick={this.handleClick}\n        className=\"card\"\n        key={item.id}\n        id={item.id}\n        src={item.img}\n        alt={item.id}\n      />\n    ));\n\n    return (\n      <div>\n        <Header score={this.state.score} highScore={this.state.highScore} />\n        <div className=\"playArea\">{arrayOfJsx}</div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}